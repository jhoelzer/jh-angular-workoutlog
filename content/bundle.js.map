{"version":3,"sources":["app.js","auth/signin.js","auth/signup.js","auth/userlinks.js","define/define.js","history/history.js","logs/logs.js","authinterceptor.js","currentuser.js","define.service.js","logs.service.js","sessiontoken.js","users.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACztBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function() {\r\n\tvar app = angular.module('workoutlog', [\r\n\t\t'ui.router',\r\n\t\t'workoutlog.define',\r\n\t\t'workoutlog.logs',\r\n\t\t'workoutlog.history',\r\n\t\t//'workoutlog.feed',\r\n\t\t'workoutlog.auth.signup',\r\n\t\t'workoutlog.auth.signin'\r\n\t\t])\r\n\t.factory('socket', function(socketFactory) {\r\n\t\tvar myIoSocket = io.connect('http://localhost:3000');\r\n\r\n\t\tvar socket = socketFactory({\r\n\t\t\tioSocket: myIoSocket\r\n\t\t});\r\n\t\treturn socket;\r\n\t})\r\n\r\n\tfunction config($urlRouterProvider) {\r\n\t\t$urlRouterProvider.otherwise('/signin');\r\n\t}\r\n\r\n\tconfig.$inject = [ '$urlRouterProvider' ];\r\n\tapp.config(config);\r\n\r\n\tvar API_BASE = location.hostname === \"localhost\" ?\r\n\t\t\"//localhost:3000/api/\" : \"https://data.heroku.com/datastores/8f950197-301a-4213-b5b2-6c60dbb09506\";\r\n\tapp.constant('API_BASE', API_BASE);\r\n})();","(function() {\r\n\tangular\r\n\t\t.module('workoutlog.auth.signin', ['ui.router'])\r\n\t\t.config(signinConfig);\r\n\r\n\t\tfunction signinConfig($stateProvider) {\r\n\t\t\t$stateProvider\r\n\t\t\t\t.state('signin', {\r\n\t\t\t\t\turl: '/signin',\r\n\t\t\t\t\ttemplateUrl: '/components/auth/signin.html',\r\n\t\t\t\t\tcontroller: SignInController,\r\n\t\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\t\tbindToController: this\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tsigninConfig.$inject = ['$stateProvider'];\r\n\r\n\t\tfunction SignInController($state, UsersService) {\r\n\t\t\tvar vm = this;\r\n\t\t\tvm.user = {};\r\n\t\t\tvm.login = function() {\r\n\t\t\t\tUsersService.login(vm.user).then(function(response) {\r\n\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\t$state.go('define');\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tSignInController.$inject = ['$state', \"UsersService\"];\r\n})();","(function() {\r\n\tangular\r\n\t\t.module('workoutlog.auth.signup', ['ui.router'])\r\n\t\t.config(signupConfig);\r\n\r\n\t\tfunction signupConfig($stateProvider) {\r\n\t\t\t$stateProvider\r\n\t\t\t\t.state('signup', {\r\n\t\t\t\t\turl: '/signup',\r\n\t\t\t\t\ttemplateUrl: '/components/auth/signup.html',\r\n\t\t\t\t\tcontroller: SignUpController,\r\n\t\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\t\tbindToController: this\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tsignupConfig.$inject = ['$stateProvider'];\r\n\r\n\t\tfunction SignUpController($state, UsersService) {\r\n\t\t\tvar vm = this;\r\n\t\t\tvm.user = {};\r\n\t\t\tvm.message = \"Sign up for an account!\";\r\n\t\t\tvm.submit = function() {\r\n\t\t\t\tUsersService.create(vm.user).then(function(response) {\r\n\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\t$state.go('define');\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tSignUpController.$inject = ['$state', 'UsersService'];\r\n})();","(function() {\r\n\tangular\r\n\t\t.module('workoutlog')\r\n\t\t.directive('userlinks',\r\n\t\t\tfunction() {\r\n\t\t\t\tUserLinksController.$inject = [ '$state', 'CurrentUser', 'SessionToken' ];\r\n\t\t\t\tfunction UserLinksController($state, CurrentUser, SessionToken) {\r\n\t\t\t\t\tvar vm = this;\r\n\t\t\t\t\tvm.user = function() {\r\n\t\t\t\t\t\treturn CurrentUser.get();\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tvm.signedIn = function() {\r\n\t\t\t\t\t\treturn !!(vm.user().id);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tvm.logout = function() {\r\n\t\t\t\t\t\tCurrentUser.clear();\r\n\t\t\t\t\t\tSessionToken.clear();\r\n\t\t\t\t\t\t$state.go('signin');\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tscope: {},\r\n\t\t\t\t\tcontroller: UserLinksController,\r\n\t\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\t\tbindToController: true,\r\n\t\t\t\t\ttemplateUrl: '/components/auth/userlinks.html'\r\n\t\t\t\t};\r\n\t\t\t});\r\n})();","(function() {\r\n\tangular\r\n\t\t.module('workoutlog.define', [\r\n\t\t\t'ui.router'\r\n\t\t\t])\r\n\t\t.config(defineConfig);\r\n\r\n\t\tfunction defineConfig($stateProvider) {\r\n\t\t\t$stateProvider\r\n\t\t\t\t.state('define', {\r\n\t\t\t\t\turl: '/define',\r\n\t\t\t\t\ttemplateUrl: '/components/define/define.html',\r\n\t\t\t\t\tcontroller: DefineController,\r\n\t\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\t\tbindToController: this,\r\n\t\t\t\t\tresolve: [\r\n\t\t\t\t\t\t'CurrentUser', '$q', '$state',\r\n\t\t\t\t\t\tfunction(CurrentUser, $q, $state) {\r\n\t\t\t\t\t\t\tvar deferred = $q.defer();\r\n\t\t\t\t\t\t\tif (CurrentUser.isSignedIn()) {\r\n\t\t\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdeferred.reject();\r\n\t\t\t\t\t\t\t\t$state.go('signin');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn deferred.promise;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tdefineConfig.$inject = [ '$stateProvider' ];\r\n\r\n\t\tfunction DefineController( $state, DefineService ) {\r\n\t\t\tvar vm = this;\r\n\t\t\tvm.message = \"Basic bird info goes here\";\r\n\t\t\tvm.saved = false;\r\n\t\t\tvm.definition = {};\r\n\t\t\tvm.save = function() {\r\n\t\t\t\tDefineService.save(vm.definition)\r\n\t\t\t\t\t.then(function() {\r\n\t\t\t\t\t\tvm.saved = true;\r\n\t\t\t\t\t\t$state.go('logs')\r\n\t\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t\tDefineController.$inject = [ '$state', 'DefineService' ];\r\n})();","(function() {\r\n\tangular\r\n\t\t.module('workoutlog.history', [\r\n\t\t\t'ui.router'\r\n\t\t])\r\n\t\t.config(historyConfig);\r\n\t\thistoryConfig.$inject = ['$stateProvider'];\r\n\t\tfunction historyConfig($stateProvider) {\r\n\r\n\t\t\t$stateProvider\r\n\t\t\t\t.state('history', {\r\n\t\t\t\t\turl: '/history',\r\n\t\t\t\t\ttemplateUrl: '/components/history/history.html',\r\n\t\t\t\t\tcontroller: HistoryController,\r\n\t\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\t\tbindToController: this,\r\n\t\t\t\t\tresolve: {\r\n\t\t\t\t\t\tgetUserLogs: [\r\n\t\t\t\t\t\t\t'LogsService',\r\n\t\t\t\t\t\t\tfunction(LogsService) {\r\n\t\t\t\t\t\t\t\treturn LogsService.fetch();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tHistoryController.$inject = ['$state', 'LogsService'];\r\n\t\tfunction HistoryController($state, LogsService) {\r\n\t\t\tvar vm = this;\r\n\t\t\tvm.history = LogsService.getLogs();\r\n\t\t\tvm.delete = function(item) {\r\n\t\t\t\tLogsService.deleteLogs(item);\r\n\t\t\t};\r\n\t\t\tvm.updateLog = function(item) {\r\n\t\t\t\t$state.go('logs/update', { 'id': item.id });\r\n\t\t\t};\r\n\t\t}\r\n})();","(function(){\r\n\tangular.module('workoutlog.logs', [\r\n\t\t'ui.router'\r\n\t])\r\n\t.config(logsConfig);\r\n\r\n\tlogsConfig.$inject = ['$stateProvider'];\r\n\tfunction logsConfig($stateProvider){\r\n\t\t$stateProvider\r\n\t\t\t.state('logs',{\r\n\t\t\t\turl: '/logs',\r\n\t\t\t\ttemplateUrl: '/components/logs/logs.html',\r\n\t\t\t\tcontroller: LogsController,\r\n\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\tbindToController: this,\r\n\t\t\t\tresolve: {\r\n\t\t\t\t\tgetUserDefinitions: [\r\n\t\t\t\t\t\t'DefineService',\r\n\t\t\t\t\t\tfunction(DefineService){\r\n\t\t\t\t\t\t\treturn DefineService.fetch();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t//  Notice in the .state(‘logs/update’) the ‘/:id’.  This is the variable that is passed to $stateParams.id. Notice on the .state(‘logs/update’) that there are two functions that occur on the resolve.  This allows the route to have access to the data of the log being edited.  Also note, that the resolve is getting all user definitions of a workout.\r\n\t\t\t.state('logs/update', {\r\n\t\t\t\turl: '/logs/:id', \r\n\t\t\t\ttemplateUrl: '/components/logs/logs-update.html',\r\n\t\t\t\tcontroller: LogsController,\r\n\t\t\t\tcontrollerAs: 'ctrl',\r\n\t\t\t\tbindToController: this,\r\n\t\t\t\tresolve: {\r\n\t\t\t\t\tgetSingleLog: function($stateParams, LogsService){\r\n\t\t\t\t\t\t// $stateParams.id allows the application to pass the url and use that as a way to identify an individual workout.  Notice in the .state(‘logs/update’) the ‘/:id’.  This is the variable that is passed to $stateParams.id.\r\n\t\t\t\t\t\treturn LogsService.fetchOne($stateParams.id);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tgetUserDefinitions: function(DefineService){\r\n\t\t\t\t\t\treturn DefineService.fetch();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\t//how building the log\r\n\tLogsController.$inject = ['$state', 'DefineService', 'LogsService'];\r\n\tfunction LogsController($state, DefineService, LogsService){\r\n\t\tvar vm = this;\r\n\t\tvm.saved = false;\r\n\t\tvm.log = {};\r\n\t\t// should return defs that weve made. if not seeing, this is worng\r\n\t\tvm.userDefinitions = DefineService.getDefinitions();\r\n\t\tvm.updateLog = LogsService.getLog();\r\n\t\tvm.save = function(){\r\n\t\t\tLogsService.save(vm.log)\r\n\t\t\t\t.then(function(){\r\n\t\t\t\t\tvm.saved = true;\r\n\t\t\t\t\t$state.go('history');\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\t// create an update function here. rebuilding\r\n\t\tvm.updateSingleLog = function() {\r\n\t\t\tvar logToUpdate = {\r\n\t\t\t\tid: vm.updateLog.id,\r\n\t\t\t\tdesc: vm.updateLog.description,\r\n\t\t\t\tresult: vm.updateLog.result,\r\n\t\t\t\tdef: vm.updateLog.def\r\n\t\t\t}\r\n\t\t\tLogsService.updateLog(logToUpdate)\r\n\t\t\t\t.then(function(){\r\n\t\t\t\t\t$state.go('history');\r\n\t\t\t\t});\r\n\t\t};\r\n\t}\r\n})();","(function() {\r\n\tangular.module('workoutlog')\r\n\t.factory('AuthInterceptor', ['SessionToken', 'API_BASE',\r\n\t\tfunction(SessionToken, API_BASE) {\r\n\t\t\treturn {\r\n\t\t\t\trequest: function(config) {\r\n\t\t\t\t\tvar token = SessionToken.get();\r\n\t\t\t\t\tif (token && config.url.indexOf(API_BASE) > -1) {\r\n\t\t\t\t\t\tconfig.headers['Authorization'] = token;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn config;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}]);\r\n\tangular.module('workoutlog')\r\n\t.config(['$httpProvider', function($httpProvider) {\r\n\t\treturn $httpProvider.interceptors.push('AuthInterceptor');\r\n\t}]);\r\n})();","(function() {\r\n\tangular.module('workoutlog')\r\n\t.service('CurrentUser', [ '$window', function($window) {\r\n\t\tfunction CurrentUser() {\r\n\t\t\tvar currUser = $window.localStorage.getItem('currentUser');\r\n\t\t\tif (currUser && currUser !== \"undefined\") {\r\n\t\t\t\tthis.currentUser = JSON.parse($window.localStorage.getItem('currentUser'));\r\n\t\t\t}\r\n\t\t}\r\n\t\tCurrentUser.prototype.set = function(user) {\r\n\t\t\tthis.currentUser = user;\r\n\t\t\t$window.localStorage.setItem('currentUser', JSON.stringify(user));\r\n\t\t};\r\n\t\tCurrentUser.prototype.get = function() {\r\n\t\t\treturn this.currentUser || {};\r\n\t\t};\r\n\t\tCurrentUser.prototype.clear = function() {\r\n\t\t\tthis.currentUser = undefined;\r\n\t\t\t$window.localStorage.removeItem('currentUser');\r\n\t\t};\r\n\t\tCurrentUser.prototype.isSignedIn = function() {\r\n\t\t\treturn !!this.get().id;\r\n\t\t};\r\n\t\treturn new CurrentUser();\r\n\t}]);\r\n})();","(function() {\r\n\tangular\r\n\t\t.module('workoutlog')\r\n\t\t.service('DefineService', DefineService);\r\n\r\n\t\tDefineService.$inject = ['$http', 'API_BASE'];\r\n\t\tfunction DefineService($http, API_BASE) {\r\n\t\t\tvar defineService = this;\r\n\t\t\tdefineService.userDefinitions = [];\r\n\r\n\t\t\tdefineService.save = function(definition) {\r\n\t\t\t\treturn $http.post(API_BASE + 'definition', {\r\n\t\t\t\t\tdefinition: definition\r\n\t\t\t\t}).then(function(response) {\r\n\t\t\t\t\tdefineService.userDefinitions.unshift(response.data);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tdefineService.fetch = function(definition) {\r\n\t\t\t\treturn $http.get(API_BASE + 'definition')\r\n\t\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t\tdefineService.userDefinitions = response.data;\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tdefineService.getDefinitions = function() {\r\n\t\t\t\treturn defineService.userDefinitions;\r\n\t\t\t};\r\n\t\t}\r\n})();","// obj get built and send ot db\r\n(function(){\r\n\tangular.module('workoutlog')\r\n\t\t.service('LogsService', LogsService);\r\n\r\n\t\tLogsService.$inject = ['$http', 'API_BASE'];\r\n\t\tfunction LogsService($http, API_BASE, DefineService){\r\n\t\t\tvar logsService = this;\r\n\t\t\tlogsService.workouts = [];\r\n\t\t\tlogsService.individualLog = {};\r\n\t\t\t// saves the log\r\n\t\t\tlogsService.save = function(log){\r\n\t\t\t\t// buuilds like postman. gets sent to server\r\n\t\t\t\treturn $http.post(API_BASE + 'log',{\r\n\t\t\t\t\tlog: log\r\n\t\t\t\t}).then(function(response){\r\n\t\t\t\t\tlogsService.workouts.push(response);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tlogsService.fetch = function(log){\r\n\t\t\t\treturn $http.get(API_BASE + 'log')\r\n\t\t\t\t\t.then(function(response){\r\n\t\t\t\t\t\tlogsService.workouts = response.data;\r\n\t\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tlogsService.getLogs = function(){\r\n\t\t\t\treturn logsService.workouts;\r\n\t\t\t};\r\n\r\n\t\t\tlogsService.deleteLogs = function(log){\r\n\t\t\t\tvar logIndex = logsService.workouts.indexOf(log);\r\n\t\t\t\tlogsService.workouts.splice(logIndex, 1);\r\n\t\t\t\tvar deleteData = {log: log};\r\n\t\t\t\treturn $http({\r\n\t\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\t\turl: API_BASE + \"log\",\r\n\t\t\t\t\tdata: JSON.stringify(deleteData),\r\n\t\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tlogsService.fetchOne = function(log){\r\n\t\t\t\t// console.log(log);\r\n\t\t\t\treturn $http.get(API_BASE + 'log/' +log)\r\n\t\t\t\t\t.then(function(response){\r\n\t\t\t\t\t\tlogsService.individualLog = response.data;\r\n\t\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tlogsService.getLog = function(){\r\n\t\t\t\treturn logsService.individualLog;\r\n\t\t\t};\r\n\r\n\t\t\tlogsService.updateLog = function(logToUpdate){\r\n\t\t\t\treturn $http.put(API_BASE + 'log', {log: logToUpdate});\r\n\t\t\t}\r\n\t\t}\r\n})();","(function() {\r\n\tangular.module('workoutlog')\r\n\t.service('SessionToken', ['$window', function($window) {\r\n\t\tfunction SessionToken() {\r\n\t\t\tthis.sessionToken = $window.localStorage.getItem('sessionToken');\r\n\t\t}\r\n\r\n\t\tSessionToken.prototype.set = function(token) {\r\n\t\t\tthis.sessionToken = token;\r\n\t\t\t$window.localStorage.setItem('sessionToken', token);\r\n\t\t};\r\n\r\n\t\tSessionToken.prototype.get = function() {\r\n\t\t\treturn this.sessionToken;\r\n\t\t};\r\n\r\n\t\tSessionToken.prototype.clear = function() {\r\n\t\t\tthis.sessionToken = undefined;\r\n\t\t\t$window.localStorage.removeItem('sessionToken');\r\n\t\t};\r\n\t\treturn new SessionToken();\r\n\t}]);\r\n})();","(function() {\r\n\tangular.module('workoutlog')\r\n\t.service('UsersService', [\r\n\t\t'$http', 'API_BASE', 'SessionToken', 'CurrentUser',\r\n\t\tfunction($http, API_BASE, SessionToken, CurrentUser) {\r\n\t\t\tfunction UsersService() {\r\n\r\n\t\t\t}\r\n\r\n\t\t\tUsersService.prototype.create = function(user) {\r\n\t\t\t\tvar userPromise = $http.post(API_BASE + 'user', {\r\n\t\t\t\t\tuser: user\r\n\t\t\t\t});\r\n\t\t\t\tuserPromise.then(function(response) {\r\n\t\t\t\t\tconsole.log(response.data.sessionToken);\r\n\t\t\t\t\tSessionToken.set(response.data.sessionToken);\r\n\t\t\t\t\tCurrentUser.set(response.data.user);\r\n\t\t\t\t});\r\n\t\t\t\treturn userPromise;\r\n\t\t\t};\r\n\r\n\t\t\tUsersService.prototype.login = function(user) {\r\n\t\t\t\tvar loginPromise = $http.post(API_BASE + 'login', {\r\n\t\t\t\t\tuser: user\r\n\t\t\t\t});\r\n\t\t\t\tloginPromise.then(function(response) {\r\n\t\t\t\t\tSessionToken.set(response.data.sessionToken);\r\n\t\t\t\t\tCurrentUser.set(response.data.user);\r\n\t\t\t\t});\r\n\t\t\t\treturn loginPromise;\r\n\t\t\t};\r\n\t\t\treturn new UsersService();\r\n\t\t}]);\r\n})();"]}